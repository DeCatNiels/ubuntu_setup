#!/usr/bin/env bash

dry='0'
subtree=''

while [[ $# > 0 ]]; do
    if [[ $1 == "--dry" ]]; then
        dry="1"
    else
        subtree="$1"
    fi
    shift
done

log() { 
    if [[ $dry == "1" ]]; then
        echo "[DRY_RUN]: $@"
    else
        echo "$@"
    fi
}

execute() {
    log "execture $@"
    if [[ $dry == "1" ]]; then
        return
    fi
    "$@"
}

# Get the root worktree path
ROOT_WORKTREE=$(git rev-parse --show-toplevel)

# Iterate over all worktrees (excluding the root worktree)
git worktree list | awk 'NR>1 {print $1}' | while read -r worktree; do

  worktree_baseName="$(basename $worktree)"
  if [ $subtree != '' ] && [ $subtree != $worktree_baseName ]; then
    continue
  fi

  # Ensure it's a subdirectory of the root worktree
  if [[ "$worktree" =~ ^"$ROOT_WORKTREE"/.+ ]]; then
    log "Checking for 'packages/**/volumes/keys/auth' in $worktree..."

    # Find all "packages/**/volumes/keys/auth" directories in the worktree
    find "$worktree/packages" -type d -path "*/volumes/keys/auth" 2>/dev/null | while read -r dir; do
      RELATIVE_PATH="${dir#$worktree/}"  # Get the relative path
      DEST_DIR="$ROOT_WORKTREE/$RELATIVE_PATH"

      # If the directory does not exist in the root worktree, copy it
      if [ ! -d "$DEST_DIR" ]; then
        log "Copying missing '$RELATIVE_PATH' from $worktree to root worktree..."
        execute mkdir -p "$DEST_DIR"
        execute rsync -av "$dir/" "$DEST_DIR/"
      fi
    done
  fi
done

log "Done!"
